name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: wrap-it-api
      ECR_PUBLIC_REGISTRY_ALIAS: ${{ secrets.ECR_PUBLIC_REGISTRY_ALIAS }}
    outputs:
      IMAGE_URI: ${{ steps.set_image_uri.outputs.IMAGE_URI }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to AWS Public ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
        env:
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Java Application
        run: mvn clean package -DskipTests

      - name: Build and Push Docker Image
        id: set_image_uri
        run: |
          IMAGE_TAG=$(date +%s)
          ECR_PUBLIC_URI="public.ecr.aws/$ECR_PUBLIC_REGISTRY_ALIAS/$ECR_REPOSITORY"

          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_PUBLIC_URI:$IMAGE_TAG
          docker push $ECR_PUBLIC_URI:$IMAGE_TAG

          echo "IMAGE_URI=$ECR_PUBLIC_URI:$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_URI::$ECR_PUBLIC_URI:$IMAGE_TAG"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1

    steps:
      - name: Debug IMAGE_URI
        run: echo "IMAGE_URI is ${{ needs.build.outputs.IMAGE_URI }}"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

            echo "Pulling Docker image: ${{ needs.build.outputs.IMAGE_URI }}"
            docker pull ${{ needs.build.outputs.IMAGE_URI }}

            echo "Stopping and removing existing container..."
            docker stop wrapit-container || true
            docker rm wrapit-container || true

            echo "Starting new container..."
            docker run -d -p 80:8080 \
              --name wrapit-container \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
              -e ACTIVATE_LIQUIBASE=${{ secrets.ACTIVATE_LIQUIBASE }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
              -e DATA_SOURCE_DRIVER_NAME=${{ secrets.DATA_SOURCE_DRIVER_NAME }} \
              -e DB_BEHAVIOR=${{ secrets.DB_BEHAVIOR }} \
              -e LIQUIBASE_MASTER_FILE=${{ secrets.LIQUIBASE_MASTER_FILE }} \
              -e SHOW_SQL=${{ secrets.SHOW_SQL }} \
              ${{ needs.build.outputs.IMAGE_URI }}